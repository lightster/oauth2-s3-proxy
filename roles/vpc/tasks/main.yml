---

- name: Setup VPC
  ec2_vpc_net:
    state: present
    cidr_block: "{{ aws_cidr_block }}"
    name: "{{ aws_vpc_prefix }}"

    resource_tags:
      App: "{{ aws_tag_app }}"
      Environment: "{{ aws_tag_environment }}"
      VPC: "{{ aws_vpc_prefix }}"

    region: "{{ aws_region }}"
    access_key: "{{ aws_access_key }}"
    secret_key: "{{ aws_secret_key }}"
  register: aws_vpc

- name: Setup internet gateway
  ec2_vpc_igw:
    vpc_id: "{{ aws_vpc.vpc.id }}"
    state: present

    region: "{{ aws_region }}"
    access_key: "{{ aws_access_key }}"
    secret_key: "{{ aws_secret_key }}"
  register: aws_igw

- name: Set tags on internet gateway
  ec2_tag:
    resource: "{{ aws_igw.gateway_id }}"
    state: present

    tags:
      Name: "{{ aws_vpc_prefix }} Internet Gateway"
      App: "{{ aws_tag_app }}"
      Environment: "{{ aws_tag_environment }}"
      VPC: "{{ aws_vpc_prefix }}"

    region: "{{ aws_region }}"
    access_key: "{{ aws_access_key }}"
    secret_key: "{{ aws_secret_key }}"

- name: Import SSH key to AWS
  ec2_key:
    name: "{{ aws_name_prefix }}ssh-key"
    key_material: "{{ item }}"

    region: "{{ aws_region }}"
    access_key: "{{ aws_access_key }}"
    secret_key: "{{ aws_secret_key }}"
  with_file: "{{ aws_ssh_key_file }}"

- name: Create security group for webauth instances
  ec2_group:
    name: "{{ aws_name_prefix }}webauth"
    description: "Created via ansible {{ ansible_date_time.iso8601_micro }}"
    vpc_id: "{{ aws_vpc.vpc.id }}"

    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 4180
        to_port: 4180
        cidr_ip: 0.0.0.0/0

    region: "{{ aws_region }}"
    access_key: "{{ aws_access_key }}"
    secret_key: "{{ aws_secret_key }}"
  register: aws_webauth_security_group

- name: Create and populate zones
  include: zone.yml
  with_dict: "{{ aws_zones }}"
  loop_control:
    loop_var: zone

- name: Initialize list of instance IDs and zones
  set_fact:
    instance_ids: []
    subnet_ids: []

- name: Get list of EC2 instances in VPC
  ec2_remote_facts:
    filters:
      instance-state-name: running
      "tag:VPC": "{{ aws_vpc_prefix }}"

    region: "{{ aws_region }}"
    access_key: "{{ aws_access_key }}"
    secret_key: "{{ aws_secret_key }}"
  register: aws_ec2_instances

- name: Add EC2 instances to inventory
  add_host:
    name: "{{ item.public_ip_address or item.private_ip_address }}"
    ansible_host: "{{ item.public_ip_address or item.private_ip_address }}"
    groups: "{{ item.tags.Role }}"
    aws_instance: "{{ item }}"
  with_items: "{{ aws_ec2_instances.instances }}"
  changed_when: False

- name: Generate list of IDs for EC2 instances in VPC
  set_fact:
    instance_ids: "{{ instance_ids + [item.id] }}"
  with_items: "{{ aws_ec2_instances.instances }}"
  changed_when: False

- name: Get list of subnets in VPC
  ec2_vpc_subnet_facts:
    filters:
      "tag:App": "{{ aws_tag_app }}"
      "tag:Environment": "{{ aws_tag_environment }}"
      "tag:VPC": "{{ aws_vpc_prefix }}"

    region: "{{ aws_region }}"
    access_key: "{{ aws_access_key }}"
    secret_key: "{{ aws_secret_key }}"
  register: aws_subnets

- name: Generate list of subnet IDs
  set_fact:
    subnet_ids: "{{ subnet_ids + [item.id] }}"
  with_items: "{{ aws_subnets.subnets }}"
  changed_when: False

- name: Setup load balancer
  ec2_elb_lb:
    name: "{{ aws_name_prefix }}webauth"
    state: present
    instance_ids: "{{ instance_ids }}"
    subnets: "{{ subnet_ids }}"

    listeners:
      - protocol: http
        load_balancer_port: 80
        instance_protocol: http
        instance_port: 80
      - protocol: https
        load_balancer_port: 443
        instance_protocol: http
        instance_port: 443
        ssl_certificate_id: "{{ aws_certificate_arn }}"

    tags:
      App: "{{ aws_tag_app }}"
      Environment: "{{ aws_tag_environment }}"
      VPC: "{{ aws_vpc_prefix }}"

    wait: yes

    region: "{{ aws_region }}"
    access_key: "{{ aws_access_key }}"
    secret_key: "{{ aws_secret_key }}"
